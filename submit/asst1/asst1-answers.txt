// Step 4 ----------------------------------------------------------------------

//sys161 output

sys161: System/161 release 2.0.3, compiled Sep 14 2021 00:42:30

OS/161 base system version 1.99.08
Copyright (c) 2000, 2001-2005, 2008-2011, 2013, 2014
   President and Fellows of Harvard College.  All rights reserved.

Put-your-group-name-here's system version 0 (DUMBVM #1)

292k physical memory available
Device probe...
lamebus0 (system main bus)
emu0 at lamebus0
ltrace0 at lamebus0
ltimer0 at lamebus0
beep0 at ltimer0
rtclock0 at ltimer0
lrandom0 at lamebus0
random0 at lrandom0
lhd0 at lamebus0
lhd1 at lamebus0
lser0 at lamebus0
con0 at lser0

cpu0: MIPS/161 (System/161 2.x) features 0x0
OS/161 kernel [? for menu]:


// git log output

commit 306e9e12b3d7a4bfa06f9598e500214baec82540 (HEAD -> master, origin/master, origin/HEAD)
Author: Stella Wang <stella01wang@gmail.com>
Date:   Wed Sep 15 12:44:33 2021 -0700

    adds git ignore

commit 10deaefd7b36aa42ff02f6a8b5c24e9a2de6a953
Author: Stella Wang <stella01wang@gmail.com>
Date:   Mon Sep 13 16:34:19 2021 -0700

    test edit readme

commit 077d3e5c61eef01257d7c9a72c70fdef0ad95774
Author: Stella Wang <stella01wang@gmail.com>
Date:   Mon Sep 13 16:16:10 2021 -0700

    restructure directory

commit 32fc928f2608dfea714c79bcff47886b459ed10f
Author: Stella Wang <stella01wang@gmail.com>
Date:   Mon Sep 13 16:00:20 2021 -0700

    test edit readme

commit a5e8d8993e3be994dff3fc64921d405bacf14495
Author: Stella Wang <stella01wang@gmail.com>
Date:   Wed Sep 15 12:52:04 2021 -0700

    adds readme

commit d685d8c8c27066ab8fb9d6d86fdaa01b3dc89445
Author: Stella Wang <stella01wang@gmail.com>
Date:   Wed Sep 15 12:57:29 2021 -0700

    initial commit of os161 for CPEN331


// git tag output

asst1-start



// Step 5 -----------------------------------------------------------------------

// Question 1
First line of OS/161 code that is executed when a trap occurs is either `mips_utlb_handler` found on line 68 in exception-mips1.S or `mips_general_handler` found on line 86 in exception-mips1.S
Control gets transferred to `common_exception` on line 104 in exception-mips1.S
Interrupts are hardware events (ie, I/O devices)


// Question 2
The line `syscall` on line 84 in src/userland/lib/libc/arch/mips/syscalls-mips.S


// Question 3
In common/libc contains standard library functions that are used both by the kernel and user-level programs
In userland/lib/libc there are standard library functions that user programs use that have lower privilege levels that the kernel will not need to use


// Question 4
Configure configures default location of the root of the installed system and target hardware platform and machine type.
Running the configure script not from the top of the OS/161 tree might invalidate that configuration and make you need/want to rerun it or if you want to change location of source tree


// Question 5
Functions can be machine dependent if it relies on specific register structures or instruction sets that that machine implements.
We would want to maintain this separation so that functions can be ran on different machines to avoid having to rewrite spcific code


// Question 6
148 bytes (4 bytes * 37 uint32), as defined in trapframe.h in lines 40 ~ 78 why is it large?
The trapframe is large because it needs to store all of userland registers during exceptino handling.


// Question 7
You should re-run the kern/conf/config script if you change the kernel config, add new source files to the build, or add new build options.


// Question 8
You should run bmake depend in kern/compile/DUMBVM if/when you change header file inclusions, or after re-running config because bmake depend updates the header file depend information


// Question 9
Rerun bmake to recompile as needed. bmake compiles the DUMBVM kernel in its source directory; bmake install installs that program in the right place in ~/root/os161


// Question 10
Append a new print hello world command to cmdtable on line 530 in menu.c for example `{ "print", printHelloWorld }` and write a function definition for the funciton printHelloWorld in the same file to run `kprintf("Hello World")`


// Question 11
Relying solely on standard utilites present on the machine does not provide strong isolation if applications are distrustful and do not provide efficient time sharing
//TODO


// Question 12
in crt0.S
The return value of main is saved to s0 (which is callee-save) so we still have it in case exit() returns.


// Question 13
First define a new code for the new system call in src\build\install\include\kern\syscall.h
For example `#define SYS_new         44`
We need to define a new function for our new system call; we can do this in kern/main/main.c
For example
```
int
sys_new(int code)
{
	// code for new system call
	return 0;
}
```
In the syscall function in kern/arch/mips/syscall.c, in the switch statement on line 102, add a case for the new system call code and call
For example
```
case SYS_reboot:
err = sys_newtf->tf_a0);
break;
```



// Step 7 -----------------------------------------------------------------------

// Question 14
Start.S
__start() on line 39 in start.S
kmain() on line 209 in main.c which calls boot()


// Question 15
addiu sp, sp, -24 on line 54 in start.S


// Question 16
(gdb) info breakpoints
Num     Type           Disp Enb Address    What
2       breakpoint     keep y   0x80014a0c in menu at ../../main/menu.c:415
3       breakpoint     keep y   0x800139ec in kmain at ../../main/main.c:211


// Question 17
We save the return address register, set up the boot stack for the first processor, set up a bunch of registers TODO commens in start.S


// Question 18
jal kmain on line 215 in start.S


// Question 19
(gdb) list
107
108             /* Early initialization. */
109             ram_bootstrap();
110             proc_bootstrap();
111             thread_bootstrap();
112             hardclock_bootstrap();
113             vfs_bootstrap();
114             kheap_nextgeneration();
115
116             /* Probe and initialize devices. Interrupts should come on. */


// Question 20
(gdb) p *bootcpu
Cannot access memory at address 0x80000


// Question 21
(gdb) p *bootcpu
$1 = {c_self = 0x8003af00, c_number = 0, c_hardware_number = 0, c_curthread = 0x8003bf80,
  c_zombies = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af1c, tln_self = 0x0}, tl_tail = {
      tln_prev = 0x8003af10, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_hardclocks = 0,
  c_spinlocks = 0, c_isidle = false, c_runqueue = {tl_head = {tln_prev = 0x0,
      tln_next = 0x8003af44, tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af38, tln_next = 0x0,
      tln_self = 0x0}, tl_count = 0}, c_runqueue_lock = {splk_lock = 0, splk_holder = 0x0},
  c_ipi_pending = 0, c_shootdown = {{ts_placeholder = 0} <repeats 16 times>}, c_numshootdown = 0,
  c_ipi_lock = {splk_lock = 0, splk_holder = 0x0}}


// Question 22
(gdb) cpuarray allcpus
0 cpus


// Question 23
(gdb) cpuarray allcpus
1 cpus
cpu 0:
$1 = {c_self = 0x8003af00, c_number = 0, c_hardware_number = 0, c_curthread = 0x8003bf80,
  c_zombies = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af1c, tln_self = 0x0}, tl_tail = {
      tln_prev = 0x8003af10, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_hardclocks = 1,
  c_spinlocks = 0, c_isidle = false, c_runqueue = {tl_head = {tln_prev = 0x0,
      tln_next = 0x8003af44, tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af38, tln_next = 0x0,
      tln_self = 0x0}, tl_count = 0}, c_runqueue_lock = {splk_lock = 0, splk_holder = 0x0},
  c_ipi_pending = 0, c_shootdown = {{ts_placeholder = 0} <repeats 16 times>}, c_numshootdown = 0,
  c_ipi_lock = {splk_lock = 0, splk_holder = 0x0}}
