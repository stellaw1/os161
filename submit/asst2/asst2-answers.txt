// Step 2 Code Reading exercises ------------------------------------------------

// Question 1
When a thread exits/ calls thread_exit(), the thread is removed from its process, overflow of thread stack is checked, and the thread is swtiched to be in a zombie state. Thread is not cleaned up yet and has to wait until thread_destroy is called from exorcise()
When a thread sleeps/ calls thread thread_switch(S_SLEEP, wc, lk), the thread is queued on the wait channel wc, protected by the spinlock lk. Specifically, interrupts are first diables on the running processor, overflow of thread stack is checked, the thread's run queue is locked, the thread is added to the tail of wc's tail, and its state is updated. The next thread is grabbed from wc and a context switch to that thread happens; if successful the next thread is ran. If no next thread exists, the cpu idles


// Question 2
thread_switch() on line 560 in kern/thread/thread.c
switchframe_switch on line 42 in kern/arch/mips/thread/switch.S handles context switch code


// Question 3
The possible thread states are:
    - S_RUN = thread is currently running
	- S_READY = thread is ready to run
	- S_SLEEP = tread is sleeping (waiting in the waitchannel to be ran)
	- S_ZOMBIE = thread has exited but has not been deleted yet (its resource has been deallocated and is waiting to be cleaned up)


// Question 4
Turning interrupts off means other processes cannot intervene with the current one and the current process can run its operations atomically. This is accomplished by raising the Set Priority Level using splhigh(). It is important to turn off interrupts in the thread subsystem code so thread switches can happen atomically and threads can exit properly.


// Question 5
When a thread wakes up another thread, threadlist_remhead() is called to grab the sleeping thread from wait channel.
thread_make_runnable() is called on the sleeping thread to make its state S_READY and adds it to the run queue.


// Question 6
thread_switch() on line 560 in kern/thread/thread.c chooses the next thread to run.
The order of next threads are determined would be determined by schedule() in thread.c if it was implemented, otherwise the order of next threads are chosen in a round robin fashion.


// Quesiton 7
In thread_switch(), threadlist_remhead() is called on line 642 to grab the next thread.
The current cpu has a c_runqueue threadlist that gets passed to threadlist_remhead(), which grabs the first thread (tln) in the cpu's run queue threadlist as the next thread to run.

// Question 8
The function hardclock() in kern/thread/thread.c calls thread_consider_migration() and schedule(), both of which affect scheduling of threads. thread_consider_migration() moves threads to other idle CPUs if the current one is busy, and schedule() would reshuffle the current CPU's runqueue if it was implemented.
thread_yield() is the hardware independent function that is called on a timer interrupt on line 106 in kern/thread/clock.c


// Question 9
wchan_sleep() yields the cpu to another process, puts it in a queue, and goes to sleep
wchan_wakeone() wakes up one thread sleeping on a wait channel
A semaphore uses wchan_sleep() on threads that are waiting for semaphore->count to be positive (aka waiting for a thread to release the semaphore) to ensure that the thread does not busy wait while waiting and yields the cpu to other threads instead.
It also uses wchan_wakeone() to wake a thread that was called wchan_sleep() on to let it know it can be ran after counter is incremented.


// Question 10
A wchan is protected by an associated, passed-in spinlock which ensures wakeup signals and sleep processes are atomic.
